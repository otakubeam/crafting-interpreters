
type Tree = struct {
   left: *Tree,
   right: *Tree,
   value: Int,
};

of *Tree -> _ -> _
fun binSearchInt tree val = {
    if !(tree ~> _) {
        return false;
    };

    var nodeValue = tree->value;

    if nodeValue == val {
       return true;
    };

    var subtree = if nodeValue < val {
        tree->left
    } else {
        tree->right
    };

    binSearchInt(subtree, val)
};

##############################
#                            #
#         +---+              #
#         | 2 |              #
#         +---+              #
#   +---+       +---+        #
#   | 1 |       | 3 |        #
#   +---+       +---+        #
#                     +---+  #
#                     | 4 |  #
#                     +---+  #
#                            #
##############################

fun main = {
    of Tree var tr1 = { .left = unit ~> _, .right = unit ~> _, .value = 1, };
    # of Tree var tr4 = { .left = unit ~> _, .right = unit ~> _, .value = 4, };
    # of Tree var tr3 = { .left = unit ~> _, .right = &tr4,      .value = 3, };
    # of Tree var tr2 = { .left = &tr1, .right = &tr3, .value = 2, };

    # assert(binSearchInt(&tr2, 3));
    # assert(binSearchInt(&tr2, 2));
    # assert(binSearchInt(&tr2, 4));
    # assert(binSearchInt(&tr2, 1));
    # assert(binSearchInt(&tr2, 123) == false);
};

