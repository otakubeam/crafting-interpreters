{

struct Tree {                                     
   left: *Tree,                                   
   right: *Tree,                                  
   parent: *Tree,                                  
                                                  
   value: Int,                                    
   isBlack: Bool,                                 
};

##########################################################
                                                   
fun isLeaf(node: *Tree) Bool {
   var left = (*node).left;
   var right = (*node).right;

   if isNull(left) {
      if isNull(right) {
         return true;
      };
   };

   false
}

##########################################################

fun isBlack(node: *Tree) Bool {
   if isNull(node) {
      return true;     
   };

   if (*node).isBlack {
      return true;
   };

   false
}

# Assume non-null pointers
fun bothRed(node1: *Tree, node2: *Tree) Bool {
   if isBlack(node1) {
      return false;
   };

   if isBlack(node2) {
      return false;
   };

   true
}

##########################################################

fun rotateRight(node: *Tree) Unit {
    var me = node;
    var parent = (*node).parent;
    var grandparent = (*parent).parent;

    (*grandparent).left = me;
    (*parent).right = grandparent;
    (*me).parent = grandparent;
}

##########################################################

fun rotateLeft(node: *Tree) Unit {
    var me = node;
    var parent = (*node).parent;
    var grandparent = (*parent).parent;

    (*grandparent).right = me;
    (*parent).left = grandparent;
    (*me).parent = grandparent;
}

##########################################################

fun sequentialTwoRed(node: *Tree) Bool {
   var parent = (*node).parent;
   bothRed(parent, node)
}

##########################################################

fun isLeftChild(node: *Tree) Bool {
   if isNull((*node).parent) {
      return false;
   };

   var parent = (*node).parent;
   var parentLeft = (*parent).left;

   if parentLeft == node {
      return true;
   };

   false
}

##########################################################

fun getUncle(node: *Tree) *Tree {
   var parent = (*node).parent;

   if isNull(parent) {
      return unit;
   };

   var grandparent = (*parent).parent;

   if (isLeftChild(parent)) {
      (*grandparent).right
   } else {
      (*grandparent).left
   }
}

##########################################################

fun setBlack(node: *Tree, val: Bool) Unit {
   if isNull(node) {
      if val == false {
         # Error!
         print(3234092342);
      };
      return;
   };

   (*node).isBlack = val;
}

fun pushRednessUp(node: *Tree) Unit {
   var uncle = getUncle(node);
   var parent = (*node).parent;

   var grandparent = (*parent).parent;

   setBlack(grandparent, false);

   setBlack(parent, true);
   setBlack(uncle, true);
}

##########################################################

fun fixup(node: *Tree) Unit {
   var parent = (*node).parent;

   if isNull(parent) {
      (*node).isBlack = true;
      return;
   };

   if sequentialTwoRed(node) {
      var uncle = getUncle(node);

      if bothRed(uncle, parent) {
         pushRednessUp(node);
         var grandparent = (*parent).parent;
         fixup(grandparent);
         return;
      };

      if isLeftChild(parent) {
         rotateRight(node);
      } else {
         rotateLeft(node); 
      };

      fixup(parent);
   };
}

##########################################################

fun insertNewValue(tree: *Tree, node: *Tree) Unit {
    var nodeValue = (*tree).value;                 
    var val = (*node).value;                 
                                                   
    if nodeValue == val {                          
       return;                                     
    };

    var candidate = if nodeValue < val {           
       &(*tree).right
    } else {                                       
       &(*tree).left                            
    };                                             
                                                   
    if isNull(*candidate) {                        
       *candidate = node;                        
       (*node).parent = tree;                    
       fixup(node);
    } else {                                       
       insertNewValue(*candidate, node);         
    };                                             
}                                                  

##########################################################
###################### TESTING ###########################
##########################################################

fun max(a: Int, b: Int) Int {
   if a < b {
      b
   } else {
      a
   }
}

##########################################################

fun calculateDepth(node: *Tree) Int {
   if isNull(node) {
      return 0;
   };

   if isLeaf(node) {
      return 1;
   };

   var left = (*node).left;
   var right = (*node).right;

   return max(calculateDepth(right), calculateDepth(left)) + 1;
}

##########################################################

# It could change after rotations
fun findTreeRoot(node: *Tree) *Tree {
   var parent = (*node).parent;

   if isNull(parent) {
      node
   } else {
      findTreeRoot(parent)
   }
}

##########################################################

fun simpleInsert(tree: *Tree, node: *Tree) Unit { 
   var nodeValue = (*tree).value;                  
   var value = (*node).value;                  
                                                   
   if nodeValue == value {                           
      return;                                      
   };                                              
                                                   
   var candidate = if nodeValue < value {            
       &(*tree).right
   } else {                                        
       &(*tree).left                              
   };                                              
                                                   

   if isNull(*candidate) {                         
       *candidate = node;                         
       (*node).parent = tree;
   } else {                                        
       simpleInsert(*candidate, node);          
   };                                              
}                                                   

##########################################################

# I don't need it, right?
# var nullNode = Tree:{unit, unit, unit, 123, true};

##########################################################

var initialRoot = Tree:{unit, unit, unit, 5, true};
var rootPtr = &initialRoot;

var d1 = calculateDepth(rootPtr);

##########################################################

var tr3 = Tree:{unit, unit, unit, 3, false};
insertNewValue(rootPtr, &tr3);
rootPtr = findTreeRoot(rootPtr);

var d2 = calculateDepth(rootPtr);
 
##########################################################

var tr4 = Tree:{unit, unit, unit, 4, false};
insertNewValue(rootPtr, &tr4);
rootPtr = findTreeRoot(rootPtr);

var d3 = calculateDepth(rootPtr);

##########################################################

var tr2 = Tree:{unit, unit, unit, 2, false};
insertNewValue(rootPtr, &tr2);
rootPtr = findTreeRoot(rootPtr);

var d4 = calculateDepth(rootPtr);

##########################################################

var tr100 = Tree:{unit, unit, unit, 100, false};
insertNewValue(rootPtr, &tr100);
rootPtr = findTreeRoot(rootPtr);

var d100 = calculateDepth(rootPtr);

##########################################################

var tr101 = Tree:{unit, unit, unit, 101, false};
insertNewValue(rootPtr, &tr101);
rootPtr = findTreeRoot(rootPtr);

var d101 = calculateDepth(rootPtr);

##########################################################

var tr102 = Tree:{unit, unit, unit, 102, false};
insertNewValue(rootPtr, &tr102);
rootPtr = findTreeRoot(rootPtr);

var d102 = calculateDepth(rootPtr);

##########################################################

var tr103 = Tree:{unit, unit, unit, 103, false};
insertNewValue(rootPtr, &tr103);
rootPtr = findTreeRoot(rootPtr);

var d103 = calculateDepth(rootPtr);

##########################################################

var tr104 = Tree:{unit, unit, unit, 104, false};
insertNewValue(rootPtr, &tr104);
rootPtr = findTreeRoot(rootPtr);

var d104 = calculateDepth(rootPtr);

##########################################################

var tr105 = Tree:{unit, unit, unit, 105, false};
insertNewValue(rootPtr, &tr105);
rootPtr = findTreeRoot(rootPtr);

var d105 = calculateDepth(rootPtr);

##########################################################

var tr106 = Tree:{unit, unit, unit, 106, false};
insertNewValue(rootPtr, &tr106);
rootPtr = findTreeRoot(rootPtr);

var d106 = calculateDepth(rootPtr);

##########################################################

print(d1);
print(d2);
print(d3);
print(d4);
print(d100);
print(d101);
print(d102);
print(d103);
print(d104);
print(d105);
print(d106);

};
