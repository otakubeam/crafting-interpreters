######################################################################

fun swap a b = {
  var temp = *a;
  *a = *b;
  *b = temp;
};

######################################################################

fun iterateLeft(
  pivot: Int, lPtr: *Int,
  vec: *Int, size: Int
) Unit {
  if pivot < *(vec + *lPtr) {
    return;
  };

  if *lPtr >= size {
    return;
  };

  *lPtr = *lPtr + 1;
  return iterateLeft(pivot, lPtr, vec, size);
}

fun iterateRight(
  pivot: Int, rPtr: *Int,
  vec: *Int, size: Int
) Unit {
  if pivot >= *(vec + *rPtr) {
    return;
  };

  if *rPtr <= 0 {
    return;
  };

  *rPtr = *rPtr - 1;
  return iterateRight(pivot, rPtr, vec, size);
}

######################################################################

fun moveCenter(
  pivot: Int,
  left: *Int, right: *Int,
  vec: *Int, size: Int
) Int {

  iterateRight(pivot, right, vec, size);
  iterateLeft(pivot, left, vec, size);

  if *left >= *right {
    return *right;
  };

  var leftElem = vec + *left;
  var rightElem = vec + *right;

  if *rightElem  > *leftElem {
    return *right;
  };

  swap(leftElem, rightElem);

  return moveCenter(*vec, left, right, vec, size);
}

######################################################################

fun sortTwo(vec: *Int) Unit {
  if (*vec) < *(vec + 1) {
  } else {
    swap(vec, vec+1);
  };
}

fun sortThree(vec: *Int) Unit {
  sortTwo(vec);
  sortTwo(vec + 1);
  sortTwo(vec);
}

# size < 4
fun sortSmall(vec: *Int, size: Int) Unit {
  if size == 3 {
    sortThree(vec);
    return;
  };

  if size == 2 {
    sortTwo(vec);
  };
}

######################################################################

fun sort(vec: *Int, size: Int) Unit {
  if (size < 4) {
    sortSmall(vec, size);
    return;
  };

  var lPtr =  new Int;
  *lPtr = 0;
  var rPtr = new Int;
  *rPtr = size - 1;

  var c = moveCenter(*vec, lPtr, rPtr, vec, size);
  swap(vec + c, vec);

  sort(vec + c + 1, size - c - 1);
  return sort(vec, c); # Tail call!
}

######################################################################

fun main() Unit {
  var v1 = new [10] Int;

  *(v1 + 0) = 6;
  *(v1 + 1) = 1;
  *(v1 + 2) = 7;
  *(v1 + 3) = 9;
  *(v1 + 4) = 3;
  *(v1 + 5) = 8;
  *(v1 + 6) = 2;
  *(v1 + 7) = 5;
  *(v1 + 8) = 4;
  *(v1 + 9) = 0;

  sort(v1, 10);

  assert(*(v1 + 0) == 0);
  assert(*(v1 + 1) == 1);
  assert(*(v1 + 2) == 2);
  assert(*(v1 + 3) == 3);
  assert(*(v1 + 4) == 4);
  assert(*(v1 + 5) == 5);
  assert(*(v1 + 6) == 6);
  assert(*(v1 + 7) == 7);
  assert(*(v1 + 8) == 8);
  assert(*(v1 + 9) == 9);
}

######################################################################
