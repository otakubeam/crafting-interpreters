######################################################################

fun swap a b = {
    var temp = *a;
    *a = *b;
    *b = temp;
};

######################################################################

type Vec T = struct {
    data: *T,
    size: Int,
    capacity: Int,
};

######################################################################

of _ -> _ -> *Vec(Int) -> _
fun iterateLeft pivot left vec  = {
  if pivot < vec->data[*left] {
    return;
  };

  if *left >= vec->size {
    return;
  };

  *left = *left + 1;
  return iterateLeft(pivot, left, vec);
};

of _ -> _ -> *Vec(Int) -> _
fun iterateRight pivot right vec = {
  if pivot >= vec->data[*right] {
    return;
  };

  if *right <= 0 {
    return;
  };

  *right = *right - 1;
  return iterateRight(pivot, right, vec);
};

of *Int -> Unit
fun sortTwo data = if data[0] < data[1] {
    # No-op
  } else {
    swap(data, data + 1);
  };

of *Vec(Int) -> _
fun sortThree vec = {
  sortTwo(vec->data);
  sortTwo(vec->data + 1);
  sortTwo(vec->data);
};

of *Vec(Int) -> _
fun sortSmall vec = {
  if vec->size == 3 {
    sortThree(vec);
    return;
  };

  if vec->size == 2 {
    sortTwo(vec->data);
  };
};

of _ -> _ -> _ -> *Vec(Int) -> _
fun moveCenter pivot left right v = {
  iterateRight(pivot, right, v);
  iterateLeft(pivot, left, v);

  if *left >= *right {
    return *right;
  };

  if v->data[*right] > v->data[*left] {
    return *right;
  };

  # # &(*((*v).data + *right)) !
  swap(v->data + *right, v->data + *left);

  moveCenter(v->data[0], left, right, v)
};

of *Vec(Int) -> _
fun sort v = {
  if (v->size < 4) {
    sortSmall(v);
    return;
  };

  var left =  new Int;
  var right = new Int;

  *left = 0;
  *right = v->size - 1;

  var c = moveCenter(v->data[0], left, right, v);
  swap(v->data + c, v->data);

  var r = new Vec(_);
  r->data = v->data + (c + 1);
  r->size = v->size - (c + 1);
  r->capacity = v->size - (c + 1);

  var l = new Vec(_);
  l->data = v->data; l->size = c; l->capacity = c;

  sort(r);
  sort(l);
};

fun main = {
  var v1 = new [10] _;

  var vec = new Vec(_);

  vec->data = v1;
  vec->size = 10;
  vec->capacity = 10;

  v1[0] = 6;
  v1[1] = 1;
  v1[2] = 7;
  v1[3] = 9;
  v1[4] = 3;
  v1[5] = 8;
  v1[6] = 2;
  v1[7] = 5;
  v1[8] = 4;
  v1[9] = 0;

  sort(vec);

  assert(v1[0] == 0);
  assert(v1[1] == 1);
  assert(v1[2] == 2);
  assert(v1[3] == 3);
  assert(v1[4] == 4);
  assert(v1[5] == 5);
  assert(v1[6] == 6);
  assert(v1[7] == 7);
  assert(v1[8] == 8);
  assert(v1[9] == 9);
};
