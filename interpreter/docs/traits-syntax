type Ord T = trait {

    _: trait Eq(T),

    of T -> T -> Bool
    fun less a b;

};

######################################################################

type Iterable T = trait {

    type Item;

    of T -> Item
    fun next self;

};

type Deref T = trait {

    type Item = T;

    of T -> Int -> Item
    fun deref self = 0;

};

impl<T> Iterable for Vec(T) {

    type Item = T;

    of *Vec(T) -> Int -> Item
    fun deref self idx = {
        self->data[idx]
    };
   
};

